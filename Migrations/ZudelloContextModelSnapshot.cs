// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZudelloThinClientLibary;

namespace ZudelloThinclientLibrary.Migrations
{
    [DbContext(typeof(ZudelloContext))]
    partial class ZudelloContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("ZudelloThinClientLibary.Zconnections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConnectionUuid")
                        .IsRequired()
                        .HasColumnName("connection_uuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasColumnName("dataSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("InitialCatalog")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IntergrationType")
                        .IsRequired()
                        .HasColumnName("intergrationType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("TEXT");

                    b.Property<int>("UseIS")
                        .HasColumnName("useIS")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZudelloCredentials")
                        .HasColumnName("zudelloCredentials")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ZCONNECTIONS");
                });

            modelBuilder.Entity("ZudelloThinClientLibary.Zhashlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<byte[]>("Hash")
                        .HasColumnName("hash")
                        .HasColumnType("byte(16)");

                    b.Property<int>("MappingId")
                        .HasColumnName("Mapping_id")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("MappingId");

                    b.ToTable("ZHASHLOG");
                });

            modelBuilder.Entity("ZudelloThinClientLibary.Zlastsync", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastSync")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lastSync")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("MappingId")
                        .HasColumnName("Mapping_id")
                        .HasColumnType("INT");

                    b.Property<int?>("lastID")
                        .HasColumnName("lastID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MappingId");

                    b.ToTable("ZLASTSYNC");
                });

            modelBuilder.Entity("ZudelloThinClientLibary.Zmapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("DeletedAt")
                        .HasColumnName("Deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("DocType")
                        .HasColumnType("TEXT");

                    b.Property<string>("IntergrationUuid")
                        .HasColumnName("intergration_uuid")
                        .HasColumnType("TEXT");

                    b.Property<long?>("IsMasterData")
                        .HasColumnType("TINYINT");

                    b.Property<long?>("IsOutgoing")
                        .HasColumnType("TINYINT");

                    b.Property<long?>("ProcessOrder")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Updated_at")
                        .HasColumnType("Timestamp DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("connection_id")
                        .HasColumnName("connection_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("database")
                        .HasColumnType("TEXT");

                    b.Property<string>("uuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("connection_id");

                    b.ToTable("ZMAPPING");
                });

            modelBuilder.Entity("ZudelloThinClientLibary.Zqueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<int>("ConnectionId")
                        .HasColumnName("connection_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MappingId")
                        .HasColumnName("Mapping_id")
                        .HasColumnType("int");

                    b.Property<int?>("Queue_Id")
                        .HasColumnName("queue_id")
                        .HasColumnType("int");

                    b.Property<int>("ResponseSent")
                        .HasColumnName("responseSent")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Updated_at")
                        .HasColumnType("Timestamp DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("MappingId");

                    b.ToTable("ZQUEUE");
                });

            modelBuilder.Entity("ZudelloThinClientLibary.Zsettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<byte[]>("DeletedAt")
                        .HasColumnName("Deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Updated_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ZSETTINGS");
                });

            modelBuilder.Entity("ZudelloThinClientLibary.Zhashlog", b =>
                {
                    b.HasOne("ZudelloThinClientLibary.Zmapping", "Mapping")
                        .WithMany("Zhashlog")
                        .HasForeignKey("MappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZudelloThinClientLibary.Zlastsync", b =>
                {
                    b.HasOne("ZudelloThinClientLibary.Zmapping", "Mapping")
                        .WithMany("Zlastsync")
                        .HasForeignKey("MappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZudelloThinClientLibary.Zmapping", b =>
                {
                    b.HasOne("ZudelloThinClientLibary.Zconnections", "Connection")
                        .WithMany("Zmapping")
                        .HasForeignKey("connection_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZudelloThinClientLibary.Zqueue", b =>
                {
                    b.HasOne("ZudelloThinClientLibary.Zconnections", "Connection")
                        .WithMany("Zqueue")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZudelloThinClientLibary.Zmapping", "Mapping")
                        .WithMany("Zqueue")
                        .HasForeignKey("MappingId");
                });
#pragma warning restore 612, 618
        }
    }
}
